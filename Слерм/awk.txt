Вот компактная шпаргалка по `awk` — одной из самых мощных и удобных утилит для обработки текстовых данных в Linux/Unix:

````markdown
# Шпаргалка по awk

---

## Основы

```bash
awk 'pattern { action }' файл
````

* `pattern` — шаблон (условие), например: `$1 == "root"`
* `action` — действие, выполняемое при совпадении (например, вывод)

---

## Поля и строки

* `$0` — вся строка целиком
* `$1, $2, ..., $n` — n-ое поле в строке (по умолчанию разделитель — пробел/табуляция)
* `NR` — номер текущей строки
* `NF` — количество полей в текущей строке

---

## Примеры

* Вывести 1-е поле каждой строки:

  ```bash
  awk '{ print $1 }' файл
  ```

* Вывести строки, где 3-е поле больше 100:

  ```bash
  awk '$3 > 100 { print $0 }' файл
  ```

* Вывести строки, где 2-е поле равно "root":

  ```bash
  awk '$2 == "root"' файл
  ```

* Поменять разделитель полей на запятую:

  ```bash
  awk -F',' '{ print $1 }' файл.csv
  ```

---

## Встроенные функции

* `length($0)` — длина строки
* `length($1)` — длина первого поля
* `tolower($0)` — преобразовать строку в нижний регистр
* `toupper($0)` — в верхний регистр
* `substr($0, start, length)` — подстрока строки
* `int(x)` — целая часть числа
* `rand()` — случайное число (0..1)
* `sprintf(format, expr)` — форматированный вывод

---

## Управляющие конструкции

```awk
awk '
{
  if ($3 > 10) 
    print $1
  else 
    print "small"
}
' файл
```

* Циклы: `for`, `while`, `do-while`
* Операторы: `==`, `!=`, `<`, `>`, `<=`, `>=`, `&&`, `||`, `!`

---

## BEGIN и END

* `BEGIN` — блок, выполняется до обработки строк (например, инициализация)
* `END` — блок, выполняется после обработки всех строк (например, вывод итогов)

```awk
awk '
BEGIN { print "Start" }
{ print $1 }
END { print "End" }
' файл
```

---

## Примеры более сложных задач

* Подсчёт строк:

  ```bash
  awk 'END { print NR }' файл
  ```

* Суммирование 3-го поля:

  ```bash
  awk '{ sum += $3 } END { print sum }' файл
  ```

* Среднее значение 3-го поля:

  ```bash
  awk '{ sum += $3; count++ } END { print sum/count }' файл
  ```

---

## Полезные опции командной строки

* `-F` — указать разделитель полей, например `-F':'`
* `-v var=value` — передать переменную в awk

---

Если хочешь, могу помочь с примерами по твоим данным или конкретными задачами!
