Конечно! Вот удобная и компактная шпаргалка по `sed` — мощному инструменту для потокового редактирования текста:

````markdown
# Шпаргалка по sed

---

## Основы

```bash
sed 'команда' файл
````

* Выполняет команду над каждой строкой файла.
* Можно использовать несколько команд через `-e` или внутри `{}`.

---

## Частые команды

| Команда                       | Описание                                  | Пример                           |
| ----------------------------- | ----------------------------------------- | -------------------------------- |
| `s/pattern/replacement/flags` | Замена текста (substitute)                | `sed 's/old/new/' файл`          |
| `d`                           | Удалить строку                            | `sed '/pattern/d' файл`          |
| `p`                           | Вывести строку (при использовании с `-n`) | `sed -n '/pattern/p' файл`       |
| `i\`                          | Вставить строку перед текущей             | `sed '/pattern/i\New line' файл` |
| `a\`                          | Добавить строку после текущей             | `sed '/pattern/a\New line' файл` |
| `c\`                          | Заменить строку                           | `sed '/pattern/c\New line' файл` |

---

## Флаги для замены `s`

* `g` — заменить все вхождения в строке (глобально)
* `p` — вывести строку после замены (требуется `-n`)
* `i` — игнорировать регистр (в GNU sed)
* `NUMBER` — заменить только `NUMBER`-й раз

---

## Примеры

* Замена первого вхождения 'foo' на 'bar' в каждой строке:

  ```bash
  sed 's/foo/bar/' файл.txt
  ```

* Замена всех вхождений 'foo' на 'bar':

  ```bash
  sed 's/foo/bar/g' файл.txt
  ```

* Удалить строки, содержащие 'test':

  ```bash
  sed '/test/d' файл.txt
  ```

* Вывести только строки с 'error':

  ```bash
  sed -n '/error/p' файл.txt
  ```

* Вставить строку "Start" перед строками с 'header':

  ```bash
  sed '/header/i\Start' файл.txt
  ```

* Добавить строку "End" после строк с 'footer':

  ```bash
  sed '/footer/a\End' файл.txt
  ```

---

## Обработка по номерам строк

* Удалить строки с 10 по 20:

  ```bash
  sed '10,20d' файл.txt
  ```

* Вывести строки с 5 по 15:

  ```bash
  sed -n '5,15p' файл.txt
  ```

* Заменить в строке 3 слово 'foo' на 'bar':

  ```bash
  sed '3s/foo/bar/' файл.txt
  ```

---

## Работа с регулярными выражениями

* Совпадение начала строки: `^pattern`
* Совпадение конца строки: `pattern$`
* Любой символ: `.`
* Квантификаторы: `*`, `+`, `?`
* Группировка: `\( ... \)`
* Альтернатива: `\|`

---

## Несколько команд

* Вызов нескольких команд:

  ```bash
  sed -e 's/foo/bar/' -e '/baz/d' файл.txt
  ```

* Или с помощью `{}`:

  ```bash
  sed '/pattern/ { s/foo/bar/; s/baz/qux/ }' файл.txt
  ```

---

## Сохранение изменений в файл

* Создать резервную копию и заменить файл (GNU sed):

  ```bash
  sed -i.bak 's/foo/bar/g' файл.txt
  ```

* Просто заменить файл без резервной копии:

  ```bash
  sed -i 's/foo/bar/g' файл.txt
  ```

---

Если хочешь — могу помочь с написанием `sed`-команд под конкретную задачу!
